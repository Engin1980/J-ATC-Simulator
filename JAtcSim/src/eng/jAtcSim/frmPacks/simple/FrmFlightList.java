/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eng.jAtcSim.frmPacks.simple;

import eng.jAtcSim.lib.Acc;
import eng.jAtcSim.lib.Simulation;
import eng.jAtcSim.lib.airplanes.Airplane;
import eng.jAtcSim.lib.airplanes.AirplaneDataFormatter;
import eng.jAtcSim.lib.atcs.Atc;
import eng.jAtcSim.lib.exceptions.ENotSupportedException;
import eng.jAtcSim.lib.global.ReadOnlyList;

import javax.swing.*;
import javax.swing.event.ListDataListener;
import java.awt.*;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.util.LinkedList;
import java.util.List;

/**
 * @author Marek
 */
public class FrmFlightList extends javax.swing.JFrame {

  static List<Airplane.Airplane4Display> plns;
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
  Simulation sim;
  private JList lst;
  private JScrollPane scr;

  public FrmFlightList() {
    initComponents();
  }

  public void init(Simulation sim) {
    this.sim = sim;

    lst = new JList();
    lst.setCellRenderer(new MyListCellRenderer());
    scr = new JScrollPane();
    scr.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    scr.setViewportView(lst);
    this.add(scr);

    this.addComponentListener(new MyDockComponentListener(scr, 16, 32));

    Dimension d = new Dimension(ListItemComponent.WIDTH, ListItemComponent.HEIGHT * 5);
    this.setSize(d);

    this.sim.getSecondElapsedEvent().add(o -> updateList());
  }

  public void elapseSecond() {
    updateList();
    lst.repaint();
  }

  /**
   * This method is called from within the constructor to
   * initialize the form. WARNING: Do NOT modify this code.
   * The content of this method is always regenerated by the
   * Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 607, Short.MAX_VALUE)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void updateList() {
    // init pri prvnim volani
    if (plns == null) {
      plns = new LinkedList();
    }

    // znovunaplneni, kdyz nesedi pocet
    ReadOnlyList<Airplane.Airplane4Display> pi = sim.getPlanesToDisplay();
    if (plns.size() != pi.size()) {
      plns.clear();
      for (Airplane.Airplane4Display ai : pi) {
        plns.add(ai);
      }

      Dimension d = new Dimension(
          ListItemComponent.WIDTH,
          ListItemComponent.HEIGHT * plns.size());
      lst.setPreferredSize(d);
      lst.setSize(d);

      MyListModel lm = new MyListModel(plns);
      lst.setModel(lm);
    }

    // vynuceni prekresleni
    lst.invalidate();
  }

}

class MyListModel implements ListModel<Airplane.Airplane4Display> {

  List<Airplane.Airplane4Display> inner;

  public MyListModel(List<Airplane.Airplane4Display> data) {
    this.inner = data;
  }

  @Override
  public int getSize() {
    return inner.size();
  }

  @Override
  public Airplane.Airplane4Display getElementAt(int index) {
    return inner.get(index);
  }

  @Override
  public void addListDataListener(ListDataListener l) {
  }

  @Override
  public void removeListDataListener(ListDataListener l) {
  }

}

class MyListCellRenderer implements ListCellRenderer<Airplane.Airplane4Display> {

  @Override
  public Component getListCellRendererComponent(
      JList<? extends Airplane.Airplane4Display> list, Airplane.Airplane4Display value, int index, boolean isSelected, boolean cellHasFocus) {

    Component c = new ListItemComponent(value, index, isSelected);

    c.setSize(ListItemComponent.DIMENSION);
    c.setPreferredSize(ListItemComponent.DIMENSION);

    return c;
  }

}

class ListItemComponent extends Component {

  public static final int HEIGHT = 50;
  public static final int WIDTH = 200;
  public static final Dimension DIMENSION = new Dimension(WIDTH, HEIGHT);
  private static final int A = 75;
  private static final int B = 125;
  private static final Color TWR_EVEN = new Color(0, 0, A);
  private static final Color TWR_ODD = new Color(0, 0, B);
  private static final Color CTR_EVEN = new Color(0, A, A);
  private static final Color CTR_ODD = new Color(0, B, B);
  private static final Color APP_EVEN = new Color(0, A, 0);
  private static final Color APP_ODD = new Color(0, B, 0);
  private static final Color AIRPROX = new Color(155, 0, 0);
  private static final Font FONT_BIG = new Font("Courier", 1, 12);
  private static final Font FONT_SMALL = new Font("Courier", 0, 10);
  private static final int BORDER_FIRST = 4;
  private static final int BORDER_SECOND = 70;
  private static final int MAGIC_Y = -4;
  private final boolean selected;
  private final Airplane.Airplane4Display value;
  private final int index;

  public ListItemComponent(Airplane.Airplane4Display value, int index, boolean selected) {
    this.selected = selected;
    this.value = value;
    this.index = index;
  }

  @Override
  public void paint(Graphics g) {
    Color c;
    // pozadi
    if (value.isAirprox()) {
      c = AIRPROX;
    } else {
      boolean isEven = index % 2 == 0;
      Atc.eType atc = value.responsibleAtc().getType();
      switch (atc) {
        case app:
          c = isEven ? APP_EVEN : APP_ODD;
          break;
        case twr:
          c = isEven ? TWR_EVEN : TWR_ODD;
          break;
        case ctr:
          c = isEven ? CTR_EVEN : CTR_ODD;
          break;
        default:
          throw new ENotSupportedException();
      }
    }

    g.setColor(c);
    g.fillRect(0, 0, WIDTH, HEIGHT);

    // texty
    g.setColor(Color.white);

    // - bigFont
    FontMetrics fm;
    Rectangle r;

    g.setFont(FONT_BIG);
    fm = g.getFontMetrics();

    // -- callsign
    int bot = fm.getHeight() + MAGIC_Y;
    g.drawString(value.callsign().getCompany() + " " + value.callsign().getNumber(), BORDER_FIRST, bot);
    // -- sqwk
    g.drawString(AirplaneDataFormatter.formatSqwk(value.squawk()), BORDER_FIRST, HEIGHT - BORDER_FIRST);

    // - small font
    g.setFont(FONT_SMALL);
    fm = g.getFontMetrics();

    // -- planeType
    g.drawString(value.planeType().name, BORDER_FIRST, bot + fm.getHeight());

    // -- route
    bot = fm.getHeight() + MAGIC_Y;
    g.drawString(AirplaneDataFormatter.getDepartureArrivalChar(value.isDeparture()) + " " + value.routeNameOrFix(), BORDER_SECOND, bot);

    // -- FL
    bot += fm.getHeight();
    g.drawString(
        String.format("%s %s %s",
            AirplaneDataFormatter.altitudeSFixed(value.altitude()),
            AirplaneDataFormatter.getClimbDescendChar(value.verticalSpeed()),
            AirplaneDataFormatter.altitudeSFixed(value.targetAltitude())
        )
        , BORDER_SECOND, bot);

    // -- spd + hdg
    bot += fm.getHeight();
    g.drawString(
        String.format("%s // %s",
            AirplaneDataFormatter.formatHeadingLong(value.heading()),
            AirplaneDataFormatter.formatSpeedLong(value.speed())
        )
        , BORDER_SECOND, bot);
  }
}

class MyDockComponentListener extends ComponentAdapter {

  private final JComponent inner;
  private final int widthBorder;
  private final int heightBorder;

  public MyDockComponentListener(JComponent inner, int widthBorder, int heightBorder) {
    this.inner = inner;
    this.widthBorder = widthBorder;
    this.heightBorder = heightBorder;
  }

  @Override
  public void componentResized(ComponentEvent e) {
    resize(e);
  }

  @Override
  public void componentShown(ComponentEvent e) {
    resize(e);
  }

  private void resize(ComponentEvent e) {
    Component c = e.getComponent();
    inner.setSize(
        c.getWidth() - this.widthBorder,
        c.getHeight() - this.heightBorder);
  }

}

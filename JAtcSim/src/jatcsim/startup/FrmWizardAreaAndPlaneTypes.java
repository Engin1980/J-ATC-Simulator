/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jatcsim.startup;

import jatcsimlib.airplanes.AirplaneTypes;
import jatcsimlib.world.Area;
import jatcsimxml.serialization.Serializer;

/**
 *
 * @author Marek Vajgl
 */
public class FrmWizardAreaAndPlaneTypes extends FrmWizardFrame {

  /**
   * Creates new form FrmWizardAreaAndPlaneTypes
   */
  public FrmWizardAreaAndPlaneTypes() {
    initComponents();
    initExtenders();
  }

  /**
   * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
   * content of this method is always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    txtAreaXml = new javax.swing.JTextField();
    btnAreaXml = new javax.swing.JButton();
    btnTypesXml = new javax.swing.JButton();
    txtTypesXml = new javax.swing.JTextField();
    jLabel2 = new javax.swing.JLabel();
    btnContinue = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    jLabel1.setText("Area XML file:");

    txtAreaXml.setText("--");

    btnAreaXml.setText("(browse)");

    btnTypesXml.setText("(browse)");

    txtTypesXml.setText("--");

    jLabel2.setText("Plane types XML file:");

    btnContinue.setText("Continue");
    btnContinue.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnContinueActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel1)
            .addGap(18, 18, 18)
            .addComponent(txtAreaXml))
          .addGroup(layout.createSequentialGroup()
            .addComponent(jLabel2)
            .addGap(18, 18, 18)
            .addComponent(txtTypesXml, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnContinue)
            .addComponent(btnTypesXml))
          .addComponent(btnAreaXml, javax.swing.GroupLayout.Alignment.TRAILING))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(txtAreaXml, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(btnAreaXml))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel2)
          .addComponent(txtTypesXml, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(btnTypesXml))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(btnContinue)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void btnContinueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnContinueActionPerformed
    super.closeDialogIfValid();
  }//GEN-LAST:event_btnContinueActionPerformed


  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnAreaXml;
  private javax.swing.JButton btnContinue;
  private javax.swing.JButton btnTypesXml;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JTextField txtAreaXml;
  private javax.swing.JTextField txtTypesXml;
  // End of variables declaration//GEN-END:variables

  private XmlFileSelectorExtender fsAreaFile;
  private XmlFileSelectorExtender fsTypesFile;

  private void initExtenders() {
    fsAreaFile = new XmlFileSelectorExtender(txtAreaXml, btnAreaXml);
    fsTypesFile = new XmlFileSelectorExtender(txtTypesXml, btnTypesXml);
  }

  private boolean checkAreaSanity() {
    boolean ret;
    String fileName = txtAreaXml.getText();

    Area area = Area.create();
    Serializer ser = new Serializer();
    try {
      ser.fillObject(fileName, area);
      ret = true;
    } catch (Exception ex) {
      MessageBox.show("Unable to load area file " + fileName + ". Reason: " + ex.getMessage(), "Error...");
      ret = false;
    }
    return ret;
  }

  private boolean checkTypesSanity() {
    boolean ret;
    String fileName = txtTypesXml.getText();

    AirplaneTypes types = new AirplaneTypes();
    Serializer ser = new Serializer();
    try {
      ser.fillList(fileName, types);
      ret = true;
    } catch (Exception ex) {
      MessageBox.show("Unable to load plane types file " + fileName + ". Reason: " + ex.getMessage(), "Error...");
      ret = false;
    }
    return ret;
  }

  @Override
  protected void fillBySettings() {
    txtAreaXml.setText(settings.getAreaXmlFile());
    txtTypesXml.setText(settings.getPlanesXmlFile());
  }

  @Override
  protected boolean isValidated() {
    if (checkAreaSanity() == false) {
      return false;
    }
    if (checkTypesSanity() == false) {
      return false;
    }
    
    this.settings.setAreaXmlFile(txtAreaXml.getText());
    this.settings.setPlanesXmlFile(txtTypesXml.getText());
    
    return true;
  }
}
